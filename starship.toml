format = """
$username\
$git_branch\
$git_commit\
$git_metrics\
${custom.git_metrics}\
$git_status\
${custom.jj}\
${custom.jjstate}\
$c\
$elixir\
$erlang\
$elm\
$golang\
$haskell\
$nodejs\
$rust\
$docker_context\
$status\
$cmd_duration\
$line_break\
$time\
$directory\
$sudo\
$shell\
${custom.character}\
"""

right_format = """$all""" # doesn't currently work in bash... maybe soon?
# see: https://starship.rs/advanced-config/#enable-right-prompt
# addendum: requires blesh (ble.sh), and that does hugely extensive things to my prompt but also errors,
# so I'm passing on it for now

# Disable the blank line at the start of the prompt
# add_newline = false

# A continuation prompt that displays two filled in arrows
continuation_prompt = '▶▶ '

# set the command timeout to 15 seconds
command_timeout = 15000

# custom character to show shell level as an increasing number of ">"'s
[custom.character]
command = "_SHLVL=$(printf '>%.0s' $(seq 1 $SHLVL)); echo -n $_SHLVL"
when = "true"
format = "[$output]($style) "
style = "fg:#FFAC1C"

# You can also replace your username with a neat symbol like  to save some space
[username]
show_always = true
style_user = "bold #FFAC1C"
# style_root = ""
format = '[$user ]($style)'

[directory]
style = ""
format = "[$path ]($style)"
before_repo_root_style = "dimmed"
repo_root_style = "bold"
truncate_to_repo = false
truncation_length = 3
truncation_symbol = "…/"


# Here is how you can shorten some long paths by text replacement
# similar to mapped_locations in Oh My Posh:
[directory.substitutions]
"Documents" = "📄 " # "🗎 "
# "Downloads" = " "
"Downloads" = "💾 " # "📥 "
"Music" = "🎼 "
"Pictures" = "🖼️ " #" " # "📷 "
# Keep in mind that the order matters. For example:
# "Important Documents" = "  "
# will not be replaced, because "Documents" was already substituted before.
# So either put "Important Documents" before "Documents" or use the substituted version:
# "Important  " = "  "

[c]
symbol = " "
style = ""
format = '[$symbol ($version) ]($style)'

[cmd_duration]
disabled = false
format = "[$duration]($style) "
style = "yellow"
min_time = 0                    # Good to know how long prompt generation takes!
min_time_to_notify = 30_000
show_milliseconds = true
show_notifications = true

[docker_context]
disabled = true
symbol = " "
style = ""
format = '[$symbol $context ]($style) $path'

[elixir]
symbol = ""
style = 'fg:#9400D3'
version_format = '${raw}'
format = '[$symbol ($version) ]($style)'

[erlang]
format = '[$symbol](bg:#800000 fg:white)[$version ]($style)'
version_format = '${raw}'
symbol = 'e'
style = 'dimmed'
detect_files = ["rebar.config", "erlang.mk", "mix.exs"]


[elm]
symbol = " "
style = ""
format = '[$symbol ($version) ]($style)'

[git_branch]
symbol = ""
style = ""
format = '[$symbol $branch ]($style)'

[git_commit]
format = "[@ $hash]($style)[ (\\($tag\\))]($style)"
commit_hash_length = 8
only_detached = false
style = "white"
tag_disabled = false
tag_symbol = " 🏷 "

[git_metrics]
disabled = true
format = '\([+$added]($added_style)/[-$deleted]($deleted_style)\) '
added_style = "bold green"
deleted_style = "bold red"
only_nonzero_diffs = true

[custom.git_metrics]
disabled = false
# command = "git diff --numstat | awk '{ add += $1; subs += $2; loc += $1; loc += $2; fileschanged += 1 } END { printf \"[%s](+%s/-%s)\", fileschanged, add, subs }'"
# read the following output aloud as (for ex.) "22 lines changed across 2 files consisting of 13 additions and 9 deletions"
# (22|2:+13/-9)
command = """git --no-optional-locks diff --shortstat | awk '{split($0,a," ");printf "(%i|%i:\\033[32m%+i\\033[0m/\\033[31m%+i\\033[0m)",(a[4]+a[6]),a[1],a[4],-a[6]}'"""
# when = "git rev-parse --is-inside-work-tree" # i don't like having to invoke git just to guess if I'm in a git repo
# just check for the existence of the git index file up to 3 levels deep to account for the vast majority of cases
when = "[ -e ./.git/index ] || [ -e ../.git/index ] || [ -e ../../.git/index ] || [ -e ../../../.git/index ]"
format = "$output"

[git_status]
style = ""
format = '[$all_status$ahead_behind ]($style)'

[custom.jj]
command = '''
jj log -r@ -n1 --ignore-working-copy --no-graph --color always  -T '
  separate(" ",
    bookmarks.map(|x| if(
        x.name().substr(0, 10).starts_with(x.name()),
        x.name().substr(0, 10),
        x.name().substr(0, 9) ++ "…")
      ).join(" "),
    tags.map(|x| if(
        x.name().substr(0, 10).starts_with(x.name()),
        x.name().substr(0, 10),
        x.name().substr(0, 9) ++ "…")
      ).join(" "),
    surround("\"","\"",
      if(
         description.first_line().substr(0, 24).starts_with(description.first_line()),
         description.first_line().substr(0, 24),
         description.first_line().substr(0, 23) ++ "…"
      )
    ),
    if(conflict, "conflict"),
    if(divergent, "divergent"),
    if(hidden, "hidden"),
  )
'
'''
# detect_folders = [".jj"]
when = "[ -d .jj/repo ] || [ -d ../.jj/repo ] || [ -d ../../.jj/repo ] || [ -d ../../../.jj/repo ]"
symbol = "🌀"
style = ""
format = '[$symbol ]($style)'


[custom.jjstate]
# detect_folders = [".jj"]
when = "[ -d .jj/repo ] || [ -d ../.jj/repo ] || [ -d ../../.jj/repo ] || [ -d ../../../.jj/repo ]"
command = '''
jj log -r@ -n1 --no-graph -T "" --stat | tail -n1 | sd "(\d+) files? changed, (\d+) insertions?\(\+\), (\d+) deletions?\(-\)" ' ${1}m ${2}+ ${3}-' | sd " 0." ""
'''

[nix_shell]
format = '[$symbol$state( \($name\))]($style)'
impure_msg = "impure"
pure_msg = "pure"

[golang]
symbol = " "
style = ""
format = '[$symbol ($version) ]($style)'

[haskell]
symbol = " "
style = ""
format = '[$symbol ($version) ]($style)'

[java]
symbol = " "
style = ""
format = '[$symbol ($version) ]($style)'

[julia]
symbol = " "
style = ""
format = '[$symbol ($version) ]($style)'

[nodejs]
symbol = ""
style = ""
format = '[$symbol ($version) ]($style)'

[nim]
symbol = " "
style = ""
format = '[$symbol ($version) ]($style)'

[rust]
symbol = ""
style = ""
format = '[$symbol ($version) ]($style)'

[scala]
symbol = " "
style = ""
format = '[$symbol ($version) ]($style)'

[shell]
disabled = false
format = '[$indicator]($style)'
style = 'white'
bash_indicator = 'bash'
fish_indicator = 'fish'
zsh_indicator = 'zsh'
powershell_indicator = 'pwrsh'
ion_indicator = 'ion'
elvish_indicator = 'esh'
tcsh_indicator = 'tcsh'
xonsh_indicator = 'xonsh'
cmd_indicator = 'cmd'
nu_indicator = 'nu'
unknown_indicator = ''

[status]
# when = """ [[ "$!" =~ 'test' ]] """
# style = 'blink fg:yellow'
style = 'fg:yellow'
# symbol = '🔴'
success_symbol = '🟢'
sigint_symbol = '🛑'
format = '[$symbol$common_meaning$signal_name$maybe_int]($style) '
map_symbol = true
disabled = false

[sudo]
style = ''
format = '[$symbol ]($style)'
symbol = '🧙'
disabled = false

[time]
disabled = false
time_format = "%Y%m%d%H%M%S" # YYMMDDHHMMSS Format, add %f for nanoseconds
style = "dimmed"
format = '[$time ]($style)'

# add_newline = true

# format = """
# ${custom.git_repository}\
# $directory\
# $fill \
# $vcsh\
# $git_branch\
# $git_commit\
# $git_state\
# $git_metrics\
# $git_status\
# $hg_branch\
# $shlvl\
# $kubernetes\
# $docker_context\
# $package\
# $cmake\
# $dart\
# $deno\
# $dotnet\
# $elixir\
# $elm\
# $erlang\
# $golang\
# $helm\
# $java\
# $julia\
# $kotlin\
# $nim\
# $nodejs\
# $ocaml\
# $perl\
# $php\
# $purescript\
# $python\
# $red\
# $ruby\
# $rust\
# $scala\
# $swift\
# $terraform\
# $vlang\
# $vagrant\
# $zig\
# $nix_shell\
# $conda\
# $memory_usage\
# $aws\
# $gcloud\
# $openstack\
# $env_var\
# $crystal\
# $custom\
# $cmd_duration\
# $line_break\
# $username\
# $hostname\
# $lua\
# $jobs\
# $battery\
# $time\
# $status\
# $shell\
# $character"""

# [custom.git_repository]
# command = "tput el1; tput hpa 0; basename $(git rev-parse --show-toplevel) |tr -d \\040"
# directories = []
# extensions = []
# files = []
# format = "[$symbol($output)]($style)[:](red)"
# style = "bold cyan"
# symbol = ""
# #when = "true"
# when = """ test "$(git rev-parse --git-dir)" != '' """

# [aws]
# disabled = false
# expiration_symbol = "x"
# format = 'on [$symbol($profile )(\($region\) )(\[$duration\])]($style)'
# #region_aliases = ""
# style = "bold yellow"
# symbol = "☁️ "

# [aws.region_aliases]
# eu-central-1 = "frn"
# eu-west-1 = "prs"
# eu-west-2 = "ldn"

# [character]
# disabled = false
# format = "$symbol "
# error_symbol = "[x](bold red)"
# success_symbol = "[\\$](bold green)"
# vicmd_symbol = "[V](bold green)"

# [cmd_duration]
# disabled = true
# format = "took [$duration]($style) "
# style = "bold yellow"
# min_time = 10_000
# min_time_to_notify = 60_000
# show_milliseconds = false
# show_notifications = true

# [directory]
# format = "[$path]($style)[$read_only]($read_only_style) "
# style = "bold cyan"
# home_symbol = "~"
# read_only = "🔒"
# read_only_style = "red"
# truncate_to_repo = true
# truncation_length = 4
# truncation_symbol = "…/"

# [fill]
# symbol = " "
# style = "bold black"

# [git_branch]
# #format = "on [$symbol$branch]($style) "
# format = "[$symbol$branch]($style) "
# style = "bold purple"
# symbol = " "

# [git_commit]
# format = "[\\($hash\\)]($style)[ (\\($tag\\))]($style)"
# commit_hash_length = 8
# only_detached = false
# style = "bold green"
# tag_disabled = false
# tag_symbol = " 🏷 "

# [git_metrics]
# disabled = false
# format = '\([+$added]($added_style)/[-$deleted]($deleted_style)\) '
# added_style = "bold green"
# deleted_style = "bold red"

# [git_status]
# format = '([\[$all_status$ahead_behind\]]($style) )'
# style = "bold red"
# conflicted = "≠"
# ahead = "⇡"
# behind = "⇣"
# diverged = "⇕"
# untracked = "?"
# stashed = "\\$"
# modified = "!"
# staged = "+"
# renamed = "»"
# deleted = "✘"

# [git_state]
# #format = '\([$state( $progress_current/$progress_total)]($style)\) '
# style = "bold yellow"
# am = "AM"
# am_or_rebase = "AM/RB"
# bisect = "BS"
# cherry_pick = "CP"
# merge = "MG"
# rebase = "RB"
# revert = "RV"

# [hostname]
# format = "[$hostname]($style) "
# style = "bold green"
# ssh_only = false

# [kubernetes]
# format = '[$symbol$context( \($namespace\))]($style) in '
# style = "cyan bold"
# # context_aliases ?
# symbol = "☸ "

# [line_break]
# #disabled = true

# [memory_usage]
# disabled = true
# #format = "via $symbol [${ram}( \| ${swap})]($style) " # invalid escape character in string: `|`
# style = "bold dimmed white"
# symbol = "🐏"
# threshold = 75

# [package]
# disabled = true
# format = "is [$symbol$version]($style) "
# style = "bold 208"
# display_private = false
# symbol = "📦 "

# [python]
# disabled = true
# format = 'via [${symbol}${pyenv_prefix}(${version} )(\($virtualenv\) )]($style)'
# style = "yellow bold"
# detect_extensions = ["py"]
# detect_files = [".python-version", "Pipfile", "__init__.py", "pyproject.toml", "requirements.txt", "setup.py", "tox.ini"]
# detect_folders = []
# pyenv_prefix = "pyenv"
# pyenv_version_name = false
# python_binary = ["python", "python3", "python2"]
# symbol = "🐍 "
# version_format = "v${raw}"

# [shell]
# disabled = true

# [shlvl]
# disabled = true
# format = "[$symbol$shlvl]($style) "
# style = "bold yellow"
# repeat = false
# symbol = "↕️ "
# threshold = 2

# [status]
# disabled = true
# format = "[$symbol$status]($style) "
# style = "bold red"
# map_symbol = true
# not_executable_symbol = "🚫"
# not_found_symbol = "🔍"
# pipestatus = true
# pipestatus_format = "\\[$pipestatus\\] => [$symbol$common_meaning$signal_name$maybe_int]($style)"
# recognize_signal_code = true
# sigint_symbol = "🧱"
# signal_symbol = "⚡"
# #success_symbol = "✔️"
# success_symbol = "v"
# #symbol = "✖"
# symbol = "x"

# [terraform]
# disabled = true
# format = "via [$symbol$workspace]($style) "
# style = "bold 105"
# detect_extensions = ["tf", "hcl"]
# detect_files = []
# detect_folders = [".terraform"]
# symbol = "💠"
# version_format = "v${raw}"

# [time]
# disabled = true
# format = "at [$time]($style) "
# style = "bold yellow"
# #time_format = "%T"
# time_range = "-"
# use_12hr = false
# utc_time_offset = "local"

# [username]
# format = "[$user]($style)[@](red)"
# show_always = true
# style_root = "bold red"
# style_user = "bold yellow"

# [vcsh]
# disabled = false
# format = "[$symbol$repo]($style) "
# style = "bold yellow"
# symbol = "🆅"
